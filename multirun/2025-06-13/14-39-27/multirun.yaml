hydra:
  run:
    dir: outputs
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: 4
    params:
      model: choice(custom_detector,effnet,faster_rcnn,ssdlite)
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - model=custom_detector,effnet,faster_rcnn,ssdlite
  job:
    name: train
    chdir: null
    override_dirname: model=custom_detector,effnet,faster_rcnn,ssdlite
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/isha.yerramilli-rao/ir-person-detector
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/isha.yerramilli-rao/ir-person-detector/coco_models/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      dataset: flir
      model: custom_detector
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
model:
  name: custom_detector
  model:
    name: custom_detector
    device: cuda
    input_channels: 1
    output_size: 5
    backbone:
      channels:
      - 32
      - 64
      - 128
      kernel_size: 3
      padding: 1
    detector:
      hidden_size: 512
      dropout: 0.5
  training:
    batch_size: 32
    learning_rate: 0.001
    weight_decay: 0.0001
    num_epochs: 50
    early_stopping_patience: 5
    num_workers: 4
    pin_memory: true
  num_classes: 1
  pretrained: true
  confidence_threshold: 0.5
  device: cuda
  input_channels: 1
  output_size: 5
  backbone:
    channels:
    - 32
    - 64
    - 128
    kernel_size: 3
    padding: 1
  detector:
    hidden_size: 512
    dropout: 0.5
dataset:
  name: flir
  data:
    train_annotations: FLIR_ADAS_v2/images_thermal_train/coco.json
    train_images: FLIR_ADAS_v2/images_thermal_train
    val_annotations: FLIR_ADAS_v2/images_thermal_val/coco.json
    val_images: FLIR_ADAS_v2/images_thermal_val
    test_annotations: FLIR_ADAS_v2/images_thermal_test/coco.json
    test_images: FLIR_ADAS_v2/images_thermal_test
    names:
    - person
  image:
    size:
    - 640
    - 640
    channels: 1
    normalize: true
    mean:
    - 0.485
    std:
    - 0.229
  classes:
  - person
  transform:
    train:
    - name: Resize
      params:
        size:
        - 640
        - 640
    - name: Normalize
      params:
        mean:
        - 0.485
        std:
        - 0.229
    - name: RandomHorizontalFlip
      params:
        p: 0.5
    val:
    - name: Resize
      params:
        size:
        - 640
        - 640
    - name: Normalize
      params:
        mean:
        - 0.485
        std:
        - 0.229
  coco:
    format: true
    min_bbox_size: 8
    max_bbox_size: 640
    min_bbox_area: 64
    max_bbox_area: 409600
experiment:
  name: run_1
  seed: 42
  device: cuda
training:
  batch_size: 8
  num_epochs: 50
  learning_rate: 0.001
  weight_decay: 0.0001
  early_stopping_patience: 10
  checkpoint_dir: checkpoints
  num_workers: 4
  pin_memory: true
logging:
  save_dir: outputs/${experiment.name}
  log_interval: 10
  save_interval: 5
  metrics:
  - mAP
  - precision
  - recall
  - loss
  - learning_rate
  tensorboard: true
  wandb:
    enabled: false
    project: ir-person-detection
    tags: ${hydra:runtime.choices.model}
  checkpoint:
    save_best_only: true
    monitor: val_mAP
    mode: max
  evaluation:
    save_predictions: true
    save_confusion_matrix: true
    save_pr_curve: true
    iou_threshold: 0.5
    conf_threshold: 0.25
